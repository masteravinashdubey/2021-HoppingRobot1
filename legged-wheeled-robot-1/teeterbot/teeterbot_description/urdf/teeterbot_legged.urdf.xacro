<?xml version="1.0"?>
<robot name="teeterbot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:include filename="$(find teeterbot_description)/urdf/teeterbot_friction.urdf"/>

  <!--xacro:arg name="pub_ground_truth" default="0" />
  <xacro:arg name="auto_reset_orientation" default="0" />
  <xacro:arg name="auto_reset_delay" default="2.0" /-->

  <xacro:arg name="wheel_mass" default="1.0" />
  <xacro:arg name="wheel_radius" default="0.2" />
  <xacro:arg name="body_mass" default="10.0" />
  <xacro:arg name="body_width" default="0.5" />
  <xacro:arg name="body_depth" default="0.5" />
  <xacro:arg name="body_length" default="0.5" />

  <xacro:arg name="training_wheels" default="false" />

  <xacro:arg name="thigh_mass" default="0.1" />
  <xacro:arg name="thigh_width" default="0.05" />
  <xacro:arg name="thigh_depth" default="0.03" />
  <xacro:arg name="thigh_length" default="0.5" />

  <xacro:arg name="calf_mass" default="0.1" />
  <xacro:arg name="calf_width" default="0.05" />
  <xacro:arg name="calf_depth" default="0.03" />
  <xacro:arg name="calf_length" default="0.5" />
 
  <xacro:property name="wheel_mass" value="$(arg wheel_mass)" />
  <xacro:property name="wheel_radius" value="$(arg wheel_radius)" />
  <xacro:property name="wheel_thickness" value="0.1" />
  <xacro:property name="wheelbase" value="${thigh_depth + body_width +0.01}" />

  <xacro:property name="body_mass" value="$(arg body_mass)" />
  <xacro:property name="body_width" value="$(arg body_width)" />
  <xacro:property name="body_depth" value="$(arg body_depth)" />
  <xacro:property name="body_length" value="$(arg body_length)" />

  <xacro:property name="thigh_mass" value="$(arg thigh_mass)" />
  <xacro:property name="thigh_width" value="$(arg thigh_width)" />
  <xacro:property name="thigh_depth" value="$(arg thigh_depth)" />
  <xacro:property name="thigh_length" value="$(arg thigh_length)" />

  <xacro:property name="calf_mass" value="$(arg calf_mass)" />
  <xacro:property name="calf_width" value="$(arg calf_width)" />
  <xacro:property name="calf_depth" value="$(arg calf_depth)" />
  <xacro:property name="calf_length" value="$(arg calf_length)" />

<!--  <gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    
    <updateRate>100</updateRate>

    <leftJoint>left_wheel</leftJoint>

    <rightJoint>right_wheel</rightJoint>

    <wheelSeparation>${0.2 + body_width}</wheelSeparation>

    <wheelDiameter>0.4</wheelDiameter>

    <wheelAcceleration>1.0</wheelAcceleration>

    <wheelTorque>20</wheelTorque>

    <commandTopic>cmd_vel</commandTopic>

    <odometryTopic>odom</odometryTopic>

    <odometryFrame>odom</odometryFrame>

    <robotBaseFrame>base_link</robotBaseFrame>

    <odometrySource>1</odometrySource>

    <publishWheelTF>true</publishWheelTF>

    <publishOdom>true</publishOdom>

    <publishWheelJointState>true</publishWheelJointState>

    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>-->

<gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
     <robotNamespace>/teeterbot</robotNamespace>
     <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
     <!--legacyModeNS>false</legacyModeNS-->
    </plugin>
</gazebo>

<transmission name="left_wheel_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_wheel">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_wheel_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<transmission name="right_wheel_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_wheel">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_wheel_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<transmission name="right_calf_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_calf">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_calf_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<transmission name="right_thigh_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_thigh">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_thigh_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>


<transmission name="left_calf_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_calf">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_calf_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<transmission name="left_thigh_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_thigh">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_thigh_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>


    <!-- <plugin name="hector_gazebo_imu" filename="libhector_gazebo_ros_imu.so">
      <bodyName>body_com</bodyName>
      <topicName>imu</topicName>
      <gaussianNoise>0.0</gaussianNoise>
      <xyzOffset>0 0 0</xyzOffset>
      <rpyOffset>0 0 0</rpyOffset>
    </plugin> -->
    <!--plugin name="teeterbot_interface" filename="libteeterbot_gazebo_plugin.so">
      <pubGroundTruth>$(arg pub_ground_truth)</pubGroundTruth>
      <autoResetOrientation>$(arg auto_reset_orientation)</autoResetOrientation>
      <autoResetDelay>$(arg auto_reset_delay)</autoResetDelay>
      <bodyLength>$(arg body_length)</bodyLength>
      <voltageMode>$(arg voltage_mode)</voltageMode>
      <torqueMode>$(arg torque_mode)</torqueMode>
      <speedMode>$(arg speed_mode)</speedMode>
    </plugin>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <robotNamespace>$(arg robot_name)</robotNamespace>
      <jointName>
          left_wheel, right_wheel
      </jointName>
      <updateRate>100</updateRate>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo-->
   
  
  <!-- imu plugin -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>200</update_rate>
      <visualize>true</visualize>
      <topic>default_topic</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>200.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin name="novatel_gps_sim" filename="libhector_gazebo_ros_gps.so">
      <alwaysOn>1</alwaysOn>
      <updateRate>20.0</updateRate>
      <bodyName>body_com</bodyName>
      <topicName>gps</topicName>
      <velocityTopicName>gps_velocity</velocityTopicName>
      <drift>0.0 0.0 0.0</drift>
      <gaussianNoise>0.0 0.0 0.0</gaussianNoise>
      <velocityDrift>0 0 0</velocityDrift>
      <velocityGaussianNoise>0.0 0.0 0.0</velocityGaussianNoise>
    </plugin>
   </gazebo>



  
  <!--Body Com-->
  <link name="body_com">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${body_mass}"/>
      <inertia ixx="${body_mass/12 * (body_width*body_width + body_length*body_length)}" ixy="0" ixz="0" iyy="${body_mass/12 * (body_length*body_length + body_depth*body_depth)}" iyz="0" izz="${body_mass/12 * (body_width*body_width + body_depth*body_depth)}"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <collision name="collision_chassis">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
    </collision>
  </link>

  <!-- Thigh -->
  <xacro:macro name="thigh" params="name y_offset" >
    <link name="${name}" >
      <inertial>
        <origin xyz="${thigh_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <mass value="${thigh_mass}"/>
        <inertia ixx="${thigh_mass/12 * (thigh_width*thigh_width + thigh_depth*thigh_depth)}" ixy="0" ixz="0" iyy="${thigh_mass/12 * (thigh_length*thigh_length + thigh_depth*thigh_depth)}" iyz="0" izz="${thigh_mass/12 * (thigh_width*thigh_width + thigh_length*thigh_length)}"/>
      </inertial>
      <visual>
        <origin xyz="${thigh_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${thigh_length} ${thigh_width} ${thigh_depth}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision name="collision_${name}">
        <origin xyz="${thigh_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${thigh_length} ${thigh_width} ${thigh_depth}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${name}" type="continuous">
      <origin xyz="0 ${y_offset} 0" rpy="-1.570796 1.570796 0"/>
      <parent link="body_com"/>
      <child link="${name}"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <thigh name="left_thigh" y_offset="${wheelbase/2}" />
  <thigh name="right_thigh" y_offset="${-wheelbase/2}" />  

  <!-- Calf -->
  <xacro:macro name="calf" params="name offset parent" >
    <link name="${name}" >
      <inertial>
        <origin xyz="${calf_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <mass value="${calf_mass}"/>
         <inertia ixx="${calf_mass/12 * (calf_width*calf_width + calf_depth*calf_depth)}" ixy="0" ixz="0" iyy="${calf_mass/12 * (calf_length*calf_length + calf_depth*calf_depth)}" iyz="0" izz="${calf_mass/12 * (calf_width*calf_width + calf_length*calf_length)}"/>
        </inertial>
      <visual>
        <origin xyz="${calf_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${calf_length} ${calf_width} ${calf_depth}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision name="collision_${name}">
        <origin xyz="${calf_length/2 -0.025} 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${calf_length} ${calf_width} ${calf_depth}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${name}" type="continuous">
      <origin xyz="${calf_length -0.05} 0 ${offset}" rpy="0 0 0"/>
      <parent link="${parent}"/>
      <child link="${name}"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <calf name="left_calf" offset="${calf_depth/2 + thigh_depth/2 + 0.002}" parent="left_thigh" />
  <calf name="right_calf" offset="-${calf_depth/2 + thigh_depth/2 + 0.002}" parent="right_thigh" />


  <xacro:macro name="wheel" params="name offset parent" >
    <link name="${name}" >
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <!--visual>
        <origin xyz="0 0 0" rpy="1.5707 0 0"/>
        <geometry>
          <cylinder radius="${wheel_thickness/2 + 0.01}" length="0.07"/>
        </geometry>
        <material name="grey"/>
      </visual-->
      <collision name="collision_${name}">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${name}" type="continuous">
      <origin xyz="${calf_length-0.05} 0 ${offset}" rpy="0 0 0"/>
      <parent link="${parent}"/>
      <child link="${name}"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <wheel name="left_wheel" offset="${wheel_thickness/2 +0.017}" parent="left_calf" />
  <wheel name="right_wheel" offset="${-wheel_thickness/2 -0.017}" parent="right_calf" />



  <!-- IMU -->
  <link name="imu_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.015 0.008"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
        <box size="0.02 0.015 0.008"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0" />
    </inertial>
  </link>

  <joint name="imujoint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="body_com" />
    <child link="imu_link" />
    <axis xyz="0 0 0" />
  </joint>

  <!--Base Link-->
  <link name="base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
    </inertial>
    <xacro:if value="$(arg training_wheels)" >
      <collision name="training_wheel_1">
        <origin xyz="1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
      <collision name="training_wheel_2">
        <origin xyz="-1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
    </xacro:if>
  </link>

  <joint name="base_com" type="fixed">
    <origin xyz="0 0 ${body_length/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="body_com"/>
  </joint>

  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>

  <material name="orange">
    <color rgba="0.64 0.313939 0.095351 1.0"/>
  </material>
</robot>
