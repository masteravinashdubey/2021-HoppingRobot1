<?xml version="1.0"?>
<robot name="balance_bot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:include filename="$(find balance_bot_description)/urdf/balance_bot_friction.urdf"/>


  <xacro:arg name="wheel_mass" default="1.0" />
  <xacro:arg name="wheel_radius" default="0.2" />
  <xacro:arg name="body_mass" default="10.0" />
  <xacro:arg name="body_width" default="0.3" />
  <xacro:arg name="body_depth" default="0.3" />
  <xacro:arg name="body_length" default="0.8" />
  <xacro:arg name="training_wheels" default="false" />

  <xacro:property name="wheel_mass" value="$(arg wheel_mass)" />
  <xacro:property name="wheel_radius" value="$(arg wheel_radius)" />
  <xacro:property name="wheel_thickness" value="0.1" />
  <xacro:property name="wheelbase" value="${0.2 + body_width}" />

  <xacro:property name="body_mass" value="$(arg body_mass)" />
  <xacro:property name="body_width" value="$(arg body_width)" />
  <xacro:property name="body_depth" value="$(arg body_depth)" />
  <xacro:property name="body_length" value="$(arg body_length)" />

  
   
  <!-- IMU -->
  <link name="imu_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.02 0.015 0.008"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    <geometry>
        <box size="0.02 0.015 0.008"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0" />
    </inertial>
  </link>

  <joint name="imujoint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="body_com" />
    <child link="imu_link" />
    <axis xyz="0 0 0" />
  </joint>



  <xacro:macro name="wheel" params="name y_offset" >
    <link name="${name}" >
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <visual>
        <origin xyz="0 0 0" rpy="1.5707 0 0"/>
        <geometry>
          <cylinder radius="${wheel_thickness/2 + 0.01}" length="0.07"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision name="collision_${name}">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${name}" type="continuous">
      <origin xyz="0 ${y_offset} 0" rpy="-1.570796 0 0"/>
      <parent link="base_link"/>
      <child link="${name}"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <wheel name="left_wheel" y_offset="${wheelbase/2}" />
  <wheel name="right_wheel" y_offset="${-wheelbase/2}" />

  <link name="body_com">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${body_mass}"/>
      <inertia ixx="${body_mass/12 * (body_width*body_width + body_length*body_length)}" ixy="0" ixz="0" iyy="${body_mass/12 * (body_length*body_length + body_depth*body_depth)}" iyz="0" izz="${body_mass/12 * (body_width*body_width + body_depth*body_depth)}"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <collision name="collision_chassis">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
    </collision>
  </link>

  <link name="base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
    </inertial>
    <xacro:if value="$(arg training_wheels)" >
      <collision name="training_wheel_1">
        <origin xyz="1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
      <collision name="training_wheel_2">
        <origin xyz="-1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
    </xacro:if>
  </link>

  <joint name="base_com" type="fixed">
    <origin xyz="0 0 ${body_length/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="body_com"/>
  </joint>

  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>

  <material name="orange">
    <color rgba="0.64 0.313939 0.095351 1.0"/>
  </material>

<gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
     <robotNamespace>/balance_bot</robotNamespace>
     <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
     <!--legacyModeNS>false</legacyModeNS-->
    </plugin>
</gazebo>

<transmission name="left_wheel_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_wheel">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_wheel_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>

<transmission name="right_wheel_control">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_wheel">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_wheel_motor">
     <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
     <mechanicalReduction>1</mechanicalReduction>
    </actuator>
</transmission>


  <!-- imu plugin -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>200</update_rate>
      <visualize>true</visualize>
      <topic>default_topic</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>200.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin name="novatel_gps_sim" filename="libhector_gazebo_ros_gps.so">
      <alwaysOn>1</alwaysOn>
      <updateRate>20.0</updateRate>
      <bodyName>body_com</bodyName>
      <topicName>gps</topicName>
      <velocityTopicName>gps_velocity</velocityTopicName>
      <drift>0.0 0.0 0.0</drift>
      <gaussianNoise>0.0 0.0 0.0</gaussianNoise>
      <velocityDrift>0 0 0</velocityDrift>
      <velocityGaussianNoise>0.0 0.0 0.0</velocityGaussianNoise>
    </plugin>
   </gazebo>
</robot>
